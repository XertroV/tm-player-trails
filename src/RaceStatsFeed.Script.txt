declare Text G_PreviousMapUid;

// logging function, should be "MLHook_LogMe_" + PageUID
Void MLHookLog(Text msg) {
    SendCustomEvent("MLHook_LogMe_RaceStats", [msg]);
}

Integer GetBestRaceTime(CSmPlayer Player) {
    if (Player == Null || Player.Score == Null) return -1;
    if (Player.Score.BestRaceTimes.count == 0) return -1;
    return Player.Score.BestRaceTimes[Player.Score.BestRaceTimes.count - 1];
}

declare Integer[Text] LastSpawnTime;

// send a complete list of players every now and then.
Void SendActivePlayers() {
    declare Text activePlayerNames = "";
    declare Text bestTimes = "";
    foreach (Player in Players) {
        declare Text Name = Player.User.Name;
        if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
            LastSpawnTime[Name] = GameTime;
        }
        // skip players that have not been spawned for >60s
        if (!LastSpawnTime.existskey(Name) || LastSpawnTime[Name] + 60000 < GameTime)
            continue;
        if (activePlayerNames == "") {
            activePlayerNames = Player.User.Name;
            bestTimes = ""^GetBestRaceTime(Player);
        } else {
            activePlayerNames = activePlayerNames^","^Player.User.Name;
            bestTimes = bestTimes^","^GetBestRaceTime(Player);
        }
    }
    SendCustomEvent("MLHook_Event_RaceStats_ActivePlayers", [activePlayerNames, bestTimes]);
}

// we only want to send info when a player's CP count changes.
declare Integer[Text] LastCPCounts;

Void SendPlayerLatestCP(CSmPlayer Player) {
    declare Text Name = Player.User.Name;
    // skip players who haven't been spawned for 3s, long enough to get an updated 0 time
    if (!LastSpawnTime.existskey(Name) || LastSpawnTime[Name] + 3000 < GameTime)
        return;
    if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) return;
    declare CPCount = Player.RaceWaypointTimes.count;
    // update condition: the key doesn't exist, or cp counts changed = > not (key exists AND cp counts same)
    if (!(LastCPCounts.existskey(Name) && CPCount == LastCPCounts[Name])) {
        LastCPCounts[Name] = CPCount;
        declare LatestCPTime = "";
        if (CPCount > 0) {
            LatestCPTime = ""^Player.RaceWaypointTimes[CPCount - 1];
        }
        // events should be prefixed with "MLHook_Event_" + PageUID.
        // Suffixes can be applied if multiple types of events are sent.
        SendCustomEvent("MLHook_Event_RaceStats", [Player.User.Name, ""^CPCount, LatestCPTime, ""^GetBestRaceTime(Player)]);
    }
}

// to start with we want to send all data.
Void InitialSend() {
    foreach (Player in Players) {
        if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) {
            LastSpawnTime[Player.User.Name] = GameTime;
        } else {
            continue; // only send spawned players initially
        }
        declare Name = Player.User.Name;
        declare CPCount = Player.RaceWaypointTimes.count;
        LastCPCounts[Name] = CPCount;
        declare LatestCPTime = "";
        if (CPCount > 0) {
            LatestCPTime = ""^Player.RaceWaypointTimes[CPCount - 1];
        }
        SendCustomEvent("MLHook_Event_RaceStats", [Name, ""^CPCount, LatestCPTime, ""^GetBestRaceTime(Player)]);
    }
    MLHookLog("Completed: InitialSend");
}

Void CheckPlayers() {
    foreach (Player in Players) {
        SendPlayerLatestCP(Player);
    }
}

Void CheckMapChange() {
    if (Map != Null && Map.MapInfo.MapUid != G_PreviousMapUid) {
        G_PreviousMapUid = Map.MapInfo.MapUid;
        LastCPCounts = [];
    }
}

Void CheckIncoming() {
    declare Text[][] MLHook_Inbound_RaceStats for ClientUI;
    foreach (Event in MLHook_Inbound_RaceStats) {
        if (Event[0] == "SendAllPlayerStates") {
            InitialSend();
        }
        MLHookLog("Processed Incoming Event: "^Event[0]);
    }
    MLHook_Inbound_RaceStats = [];
}

main() {
    declare Integer LoopCounter = 0;
    MLHookLog("Starting RaceStatsFeed");
    while (Players.count == 0) {
        yield;
    }
    MLHookLog("RaceStatsFeed got init players");
    yield;
    // InitialSend();
    // MLHookLog("RaceStatsFeed did init send");
    while (True) {
        yield;
        CheckPlayers();
        LoopCounter += 1;
        if (LoopCounter % 60 == 0) {
            SendActivePlayers();
            CheckMapChange();
        }
        if (LoopCounter % 60 == 20) {
            CheckIncoming();
        }
    }
}
